#define _DEFAULT_SOURCE
#define _BSD_SOURCE
#define BUF_SIZE 1024
#define EXTRA_SIZE 256
#define BLOCK_SIZE 128

#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

struct header {
  uint64_t size;
  struct header *next;
};

void print_out(char *format, void *data, size_t data_size) {
  char buf[BUF_SIZE];
  ssize_t len = snprintf(buf, BUF_SIZE, format,
                         data_size == sizeof(uint64_t) ? *(uint64_t *)data
                                                       : *(void **)data);
  if (len < 0) {
    perror("snprintf");
  }
  write(STDOUT_FILENO, buf, len);
}

int main() {
  void *prog_brk = sbrk(EXTRA_SIZE);

  if (prog_brk == (void *)-1) {
    perror("sbrk");
    exit(EXIT_FAILURE);
  }

  struct header *first_block_pointer = (struct header *)prog_brk;
  first_block_pointer->next = NULL;
  first_block_pointer->size = BLOCK_SIZE;

  // TODO init data to 0

  struct header *second_block_pointer = (struct header *)prog_brk + BLOCK_SIZE;
  second_block_pointer->next = first_block_pointer;
  second_block_pointer->size = BLOCK_SIZE;

  // TODO init data to 1

  print_out("first block:       %p\n", &first_block_pointer,
            sizeof(&first_block_pointer));
  print_out("second block:      %p\n", &second_block_pointer,
            sizeof(&second_block_pointer));
  print_out("first block size:  %d\n", (void *)first_block_pointer->size,
            sizeof(first_block_pointer->size));
  print_out("first block next:  %p\n", first_block_pointer->next,
            sizeof(first_block_pointer->next));
  print_out("second block size: %d\n", (void *)second_block_pointer->size,
            sizeof(second_block_pointer->size));
  print_out("second block next: %p\n", second_block_pointer->next,
            sizeof(second_block_pointer->next));

  if (sbrk(-EXTRA_SIZE) == (void *)-1) {
    perror("sbrk");
    exit(EXIT_FAILURE);
  }

  return 0;
}
